services:
  zookeeper:
    image: zookeeper:3.9.1
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
    ports:
      - "2181:2181"
    # volumes:
    #   - ~/kafka/data/zookeeper_data:/var/lib/zookeeper/data
    #   - ~/kafka/data/zookeeper_log:/var/lib/zookeeper/log
    networks:
      - platform
    restart: "unless-stopped"

  kafka:
    image: wurstmeister/kafka:latest
    depends_on:
      - "zookeeper"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 1000000
      KAFKA_LISTENERS: LISTENER-DOCKER://:9092,LISTENER-OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: LISTENER-DOCKER://kafka:9092,LISTENER-OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER-DOCKER:PLAINTEXT,LISTENER-OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER-DOCKER
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_LOG_MESSAGE_TIMESTAMP_TYPE: LogAppendTime
      KAFKA_LOG_DIRS: /data
      KAFKA_RETENTION_MS: -1
      KAFKA_RETENTION_BYTES: -1
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_OFFSETS_RETENTION_MINUTES: 52560000
      KAFKA_CREATE_TOPICS: >
        rs-heartbeat-v1:1:1,
        rs-load-country-v1:1:1,
        rs-load-event-participants-v1:1:1,
        rs-load-event-v1:1:1,
        rs-load-incident-v1:1:1,
        rs-load-participant-relation-v1:1:1,
        rs-load-participant-v1:1:1,
        rs-load-precedence-v1:1:1,
        rs-load-sport-v1:1:1,
        rs-load-standing-v1:1:1,
        rs-load-tournament-stage-v1:1:1,
        rs-load-tournament-template-v1:1:1,
        rs-load-tournament-v1:1:1,
        rs-load-venue-v1:1:1,
        rs-load-fast-country-v1:1:1,
        rs-load-fast-event-participants-v1:1:1,
        rs-load-fast-event-v1:1:1,
        rs-load-fast-incident-v1:1:1,
        rs-load-fast-participant-relation-v1:1:1,
        rs-load-fast-participant-v1:1:1,
        rs-load-fast-precedence-v1:1:1,
        rs-load-fast-sport-v1:1:1,
        rs-load-fast-standing-v1:1:1,
        rs-load-fast-tournament-stage-v1:1:1,
        rs-load-fast-tournament-template-v1:1:1,
        rs-load-fast-tournament-v1:1:1,
        rs-load-fast-venue-v1:1:1,
        rs-readmodel-incident-v2:1:1,
        rs-readmodel-event-v2:1:1
    ports:
      - "9094:9094"
      - "9092:9092"
    # volumes:
    #   - "./data/kafka:/data"
    networks:
      - platform
    restart: "unless-stopped"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.5
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL=ERROR
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    networks:
      - platform

  kafdrop:
    image: obsidiandynamics/kafdrop:3.29.0
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      SERVER_SERVLET_CONTEXTPATH: "/"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SCHEMAREGISTRY_CONNECT: "http://schema-registry:8081"
      CMD_ARGS: "--topic.deleteEnabled=true --topic.createEnabled=true"
    depends_on:
      - kafka
      - schema-registry
    networks:
      - platform

  # redpanda:
  #   image: docker.redpanda.com/redpandadata/console:latest
  #   ports:
  #     - 8082:8080
  #   environment:
  #     KAFKA_BROKERS: kafka:9092
  #     KAFKA_SASL_ENABLED: "false"
  #     KAFKA_TLS_ENABLED: "false"
  #     KAFKA_SCHEMAREGISTRY_ENABLED: "false"
  #     KAFKA_SCHEMAREGISTRY_TLS_ENABLED: "false"
  #     KAFKA_SCHEMAREGISTRY_URLS: http://schema-registry:8081
  #   networks:
  #     - platform
  #   depends_on:
  #     kafka:
  #       condition: service_started
  #     # schema-registry:
  #     #   condition: service_healthy

networks:
  platform:
