// zig fmt: off

pub const ResponseError = error{
    // custom, non-librdkafka values
    Ignorable,

    PartitionEOF,                              // = -191,
    Unknown,                                   // = -1,
    NoError,                                   // = 0,
    OffsetOutOfRange,                          // = 1,
    InvalidMsg,                                // = 2,
    UnknownTopicOrPart,                        // = 3,
    InvalidMsgSize,                            // = 4,
    LeaderNotAvailable,                        // = 5,
    NotLeaderOrFollower,                       //
    NotLeaderForPartition,                     // = 6,
    RequestTimedOut,                           // = 7,
    BrokerNotAvailable,                        // = 8,
    ReplicaNotAvailable,                       // = 9,
    MsgSizeTooLarge,                           // = 10,
    StaleCtrlEpoch,                            // = 11,
    OffsetMetadataTooLarge,                    // = 12,
    NetworkException,                          // = 13,
    CoordinatorLoadInProgress,                 // = 14,
    GroupLoadInProgress,                       //
    CoordinatorNotAvailable,                   // = 15,
    GroupCoordinatorNotAvailable,              //
    NotCoordinator,                            // = 16,
    NotCoordinatorForGroup,                    //
    TopicException,                            // = 17,
    RecordListTooLarge,                        // = 18,
    NotEnoughReplicas,                         // = 19,
    NotEnoughReplicasAfterAppend,              // = 20,
    InvalidRequiredAcks,                       // = 21,
    IllegalGeneration,                         // = 22,
    InconsistentGroupProtocol,                 // = 23,
    InvalidGroupId,                            // = 24,
    UnknownMemberId,                           // = 25,
    InvalidSessionTimeout,                     // = 26,
    RebalanceInProgress,                       // = 27,
    InvalidCommitOffsetSize,                   // = 28,
    TopicAuthorizationFailed,                  // = 29,
    GroupAuthorizationFailed,                  // = 30,
    ClusterAuthorizationFailed,                // = 31,
    InvalidTimestamp,                          // = 32,
    UnsupportedSaslMechanism,                  // = 33,
    IllegalSaslState,                          // = 34,
    UnsupportedVersion,                        // = 35,
    TopicAlreadyExists,                        // = 36,
    InvalidPartitions,                         // = 37,
    InvalidReplicationFactor,                  // = 38,
    InvalidReplicaAssignment,                  // = 39,
    InvalidConfig,                             // = 40,
    NotController,                             // = 41,
    InvalidRequest,                            // = 42,
    UnsupportedForMessageFormat,               // = 43,
    PolicyViolation,                           // = 44,
    OutOfOrderSequenceNumber,                  // = 45,
    DuplicateSequenceNumber,                   // = 46,
    InvalidProducerEpoch,                      // = 47,
    InvalidTxnState,                           // = 48,
    InvalidProducerIdMapping,                  // = 49,
    InvalidTransactionTimeout,                 // = 50,
    ConcurrentTransactions,                    // = 51,
    TransactionCoordinatorFenced,              // = 52,
    TransactionalIdAuthorizationFailed,        // = 53,
    SecurityDisabled,                          // = 54,
    OperationNotAttempted,                     // = 55,
    KafkaStorageError,                         // = 56,
    LogDirNotFound,                            // = 57,
    SaslAuthenticationFailed,                  // = 58,
    UnknownProducerId,                         // = 59,
    ReassignmentInProgress,                    // = 60,
    DelegationTokenAuthDisabled,               // = 61,
    DelegationTokenNotFound,                   // = 62,
    DelegationTokenOwnerMismatch,              // = 63,
    DelegationTokenRequestNotAllowed,          // = 64,
    DelegationTokenAuthorizationFailed,        // = 65,
    DelegationTokenExpired,                    // = 66,
    InvalidPrincipalType,                      // = 67,
    NonEmptyGroup,                             // = 68,
    GroupIdNotFound,                           // = 69,
    FetchSessionIdNotFound,                    // = 70,
    InvalidFetchSessionEpoch,                  // = 71,
    ListenerNotFound,                          // = 72,
    TopicDeletionDisabled,                     // = 73,
    FencedLeaderEpoch,                         // = 74,
    UnknownLeaderEpoch,                        // = 75,
    UnsupportedCompressionType,                // = 76,
    StaleBrokerEpoch,                          // = 77,
    OffsetNotAvailable,                        // = 78,
    MemberIdRequired,                          // = 79,
    PreferredLeaderNotAvailable,               // = 80,
    GroupMaxSizeReached,                       // = 81,
    FencedInstanceId,                          // = 82,
    EligibleLeadersNotAvailable,               // = 83,
    ElectionNotNeeded,                         // = 84,
    NoReassignmentInProgress,                  // = 85,
    GroupSubscribedToTopic,                    // = 86,
    InvalidRecord,                             // = 87,
    UnstableOffsetCommit,                      // = 88,
    ThrottlingQuotaExceeded,                   // = 89,
    ProducerFenced,                            // = 90,
    ResourceNotFound,                          // = 91,
    DuplicateResource,                         // = 92,
    UnacceptableCredential,                    // = 93,
    InconsistentVoterSet,                      // = 94,
    InvalidUpdateVersion,                      // = 95,
    FeatureUpdateFailed,                       // = 96,
    PrincipalDeserializationFailure,           // = 97,
    UnknownTopicId,                            // = 100,
    FencedMemberEpoch,                         // = 110,
    UnreleasedInstanceId,                      // = 111,
    UnsupportedAssignor,                       // = 112,
    StaleMemberEpoch,                          // = 113,
    UnknownSubscriptionId,                     // = 117,
    TelemetryTooLarge,                         // = 118,
    EndAll,
};

pub fn from(int: c_int) anyerror {
    return switch (int) {
        0 => ResponseError.NoError,
        else => ResponseError.Unknown,
    };
}
